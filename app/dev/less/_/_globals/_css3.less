
// text-shadow mixin.

.text-shadow(@args...) when (length(@args)=4){
  @x     : extract(@args,1);
  @y     : extract(@args,2);
  @blur  : extract(@args,3);
  @color : extract(@args,4);
  text-shadow+ : @x @y @blur @color;
}


// .text-shadow(arg);
// arg: required argument passed in as a string.
// Example:
//   .text{
//     .text-shadow("1px 2px 3px #000");
//   }
// You can also pass multiple shadows as you would normally
// do with the standard CSS3 property:
//   .text2{
//     .text-shdow("0 0 1px #fff, 1px 2px 3px #000");
//   }
// This mixin can be merged with the other mixin definition, that
// takes four parameters. The following example demonstrates the merge:

//   .text3{
//     .text-shadow("1px 2px 3px #000");
//     .text-shadow(0,0,0,#fff);
//   }
//   This would output the following (this would compile to the following ...)



.text-shadow(@args...)
 when (length(@args)=1) and (isstring(extract(@args,1))){
  text-shadow+ : ~"@{args}";
}

// The general border-radius definition
//
// border-radius helpers
._border-radius(@radius; @corners...) {
  .make-border-radius(@radius; @corner){
    border-@{corner}-radius: @radius;
  }
  .loop(@corners; @index) when (isstring(extract(@corners, @index))) {
    .make-border-radius(@radius; extract(@corners, @index));
    .loop(@corners; (@index + 1));
  }
  .loop(@corners; 1);
}
.make-border-radius(@r1 ; @r2 ; @r3 ; @r4){
  ._border-radius(@r1,"top-left");  ._border-radius(@r2,"top-right");
  ._border-radius(@r3,"bottom-right");  ._border-radius(@r4,"bottom-left");
  }
  .make-border-radius-all(@r){
    .make-border-radius(@r,@r,@r,@r);
  }

//
.border-radius(...){

  @args : @arguments;
  @l : length(@args);
  @r : extract(@args,1);
  @diagnol : extract(@args,2);
  & when(@l=1) and not (isstring(@r)){
    border-radius : @r;
  }
  & when(@l=2) and not (isstring(@r)){
    @a : extract(@args,2);
    .make-border-radius-all(@r @a);
  }
  & when(@l=4) and not (isstring(@r)){
    @a : extract(@args,1);
    @b : extract(@args,2);
    @c : extract(@args,3);
    @d : extract(@args,4);
    .make-border-radius(@a,@b,@c,@d);
  }
  & when (isstring(@r)) and not (isstring(@diagnol)){
    @a : extract(@args,2);    @b : extract(@args,3);
    @c : extract(@args,4);    @d : extract(@args,5);
    @_r : ~"@{r}";
    .make-border-radius(@_r @a, @_r @b, @_r @c, @_r @d);
  }
  & when (isstring(@r)) and (isstring(@diagnol)) and (@l=6){
    @a1 : extract(@args,3);
    @a2 : extract(@args,4);
    @a3 : extract(@args,5);
    @a4 : extract(@args,6);
  .make-border-radius(~"@{r}" ~"@{a1}",~"@{diagnol}" ~"@{a2}",
                      ~"@{r}" ~"@{a3}",~"@{diagnol}" ~"@{a4}");
  }
  & when (isstring(@r)) and (isstring(@diagnol)) and (@l=2){
   .make-border-radius(~"@{r}",~"@{diagnol}",
                       ~"@{r}",~"@{diagnol}");
  }
  & when (isstring(@r)) and (isstring(@diagnol)) and (@l=3){
    @a : extract(@args,3);
  .make-border-radius(~"@{r}" ~"@{a}",~"@{diagnol}" ~"@{a}",
                      ~"@{r}" ~"@{a}",~"@{diagnol}" ~"@{a}")
  }
}


// box-shadow
// Usage:
//     .box-shadow(inner/outer, left/right/top/bottom, [@x , @y , @blur , @speed, @color ])
//     @x , @y , @blur , @speed, @color  are optional parameters
//     The first and the second arguemnts are required.
//   Example:
//     .box-shadow(inner, left, 1px, 2px, 3px, 4px, #000);
//   The first argument is required. It is a non-string parameter. The possible options are either inner or outer.
//   The second argument is required. It is a non-string parameter than can be either left, right, top or bottom.
//   The rest of the arguments are optional.
//   In the example above, 1px is the horizontal displacement, 2px is the vertical displacement, 3px is the amount of blur, 4px is the speed, and the last argument (#000) is the color.

//   The arguments can also be used explicitly in no particular order. But the first two arguments
//   should be provided and the order is important.

//   Example1 : .box-shadow(inner, left, @blur:10px, @color:#fff);
//   Example2 : .box-shadow(outer, right,  @color : rgba(0,0,0,0.6), @y:10px, @speed : 1px, @blur:10px);


.box-shadow(@type; @dir ;  @x : 3px ; @y: 0 ; @blur:8px; @speed : -3px ;  @color:#000; ) when (@type=inner) and (@dir=left){
        box-shadow+ :inset @x  @y @blur @speed @color;
}
.box-shadow(@type; @dir ;  @x : -3px ; @y: 0 ; @blur:8px; @speed : -3px ;  @color:#000; ) when (@type=inner) and (@dir=right){
        box-shadow+ :inset @x  @y @blur @speed @color;
}
.box-shadow(@type; @dir ;  @x : 0 ; @y: 3px ; @blur:8px; @speed : -3px ;  @color:#000; ) when (@type=inner) and (@dir=top){
        box-shadow+ :inset @x  @y @blur @speed @color;
}
.box-shadow(@type; @dir ;  @x : 0 ; @y: -3px ; @blur:8px; @speed : -3px ;  @color:#000; ) when (@type=inner) and (@dir=bottom){
        box-shadow+ :inset @x  @y @blur @speed @color;
}
.box-shadow(@type; @dir ;  @x : -3px ; @y: 0 ; @blur:4px; @speed : -1px ;  @color:#000;) when not (@type=inner) and (@dir=left){
        box-shadow+ :@x  @y @blur @speed @color;
 }
.box-shadow(@type; @dir ;  @x : 3px ; @y: 0 ; @blur:4px; @speed : -1px ;  @color:#000;) when not (@type=inner) and (@dir=right){
        box-shadow+ : @x  @y @blur @speed @color;
 }
.box-shadow(@type; @dir ;  @x : 0 ; @y: -3px ; @blur:4px; @speed : -1px ;  @color:#000;) when not (@type=inner) and (@dir=top){
        box-shadow+ :@x  @y @blur @speed @color;
 }
.box-shadow(@type; @dir ;  @x : 0 ; @y: 3px ; @blur:4px; @speed : -1px ;  @color:#000;) when not (@type=inner) and (@dir=bottom){
        box-shadow+ : @x  @y @blur @speed @color;
 }


//     .box-shadow("arguments");
//   The mixin is very general, and takes only one argument. It is important to notice that the single argument should be padded as a string. It is essentially equivalent to the standard CSS3 specification.

//   Example:
//   .box-shadow("0 0 2px 0 #000, inset 0 0 1px 0 #000, 1px 2px 3px 4px rgba(0,0,0,0.4)");

//   Although the mixin is identical to the standard CSS3 specification, it has one advantage. And that is that it can be used in combination with the other box-shadow mixins. For instance:

//   .multiple-shadows{
//     .box-shadow(inner,left);
//     .box-shadow(outer,top);
//     .box-shadow("0 0 2px 0 #000, inset 0 0 1px 0 #000, 1px 2px 3px 4px rgba(0,0,0,0.4)");
//   }

//   This will result in the following output:

// .multiple-shadows{
//     box-shadow: inset 3px 0 8px -3px #000000, 0 -3px 4px -1px #000000, 0 0 2px 0 #000, inset 0 0 1px 0 #000, 1px 2px 3px 4px rgba(0,0,0,0.4);
//   }


.box-shadow(@args) when (isstring(@args)){
  box-shadow+ : ~"@{args}";
}